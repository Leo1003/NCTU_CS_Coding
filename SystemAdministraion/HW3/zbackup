#!/usr/bin/env bash
eprint() {
    >&2 echo $@
}

debug() {
    if [ -n "$ZDEBUG" ]; then
        >&2 echo $@
    fi
}

DATE_REGEX='[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}-[[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}'
regex_esc() {
    sed -e 's/[^^]/[&]/g; s/\^/\\^/g; $!a\'$'\n''\\n' <<< "$1" | tr -d '\n'
}

table() {
    if [ -z "$2" ]; then
        eprint 'Not found'
        return 1
    fi
    str="$1"
    str+=$'\n'
    str+="$2"
    echo "$str" | column -t
    return $?
}

fs_exist() {
    zfs list -H -t filesystem "$1" > /dev/null 2>&1
    return $?
}
ss_exist() {
    zfs list -H -t snapshot "$1" > /dev/null 2>&1
    return $?
}

zquery() {
    snaplist="$(zfs list -H -t snapshot)"
    if [ $? -ne 0 ]; then
        eprint 'Failed to accuired snapshots'
        exit 1
    fi

    if [ $# -ge 1 ]; then
        # Filter name
        snaplist=$(grep "$(regex_esc "$1")@" <<< "$snaplist")
    fi

    local IFS=$'\n'
    snaps=''
    for snap in $snaplist; do
        if [[ $snap =~ ^([^@]+)@(${DATE_REGEX}).*$ ]]; then
            snaps+="${BASH_REMATCH[1]} ${BASH_REMATCH[2]}"
            snaps+=$'\n'
        else
            debug "'$snap' not matched!"
        fi
    done
    unset IFS

    debug "snaps = '$snaps'"
    if [ -z "$snaps" ]; then
        debug 'Snapshot not found!'
        return
    fi

    if [ -n "$ZREVERSE" ]; then
        sed '$d' <<< "$snaps" | sort -r -k 2 | awk '{print NR, $0}'
    else
        sed '$d' <<< "$snaps" | sort -k 2 | awk '{print NR, $0}'
    fi
}

get_id() {
    if [ $# -ne 2 ]; then
        # Filter name
        eprint 'get_id() invalid parameter counts!'
        return 1
    fi
    local IFS=$'\n'
    for snap in $1; do
        if [ $(echo "$snap" | cut -d ' ' -f 1) -eq $2 ]; then
            echo "$snap"
        fi
    done
}

zselect() {
    if [ $# -eq 2 ]; then
        if ! fs_exist "$1"; then
            eprint "Invalid parameter: '$1' is not a filesystem!"
            return 1
        fi
        echo "$(get_id "$(zquery $1)" $2)"
    elif [ $# -eq 1 ]; then
        if [[ $1 =~ ^[0-9]+$ ]]; then
            echo "$(get_id "$(zquery)" $1)"
        else
            if ! fs_exist "$1"; then
                eprint "Invalid parameter: '$1' is not a filesystem!"
                return 1
            fi
            echo "$(zquery $1)"
        fi
    elif [ $# -eq 0 ]; then
        echo "$(zquery)"
    else
        # Prompt to print usage
        return 2
    fi
    return $?
}

zremove() {
    echo "Destory ${1}"
    zfs destroy "$1"
    local zret=$?
    eprint "Failed to remove snapshot '$1'"
    return $zret
}

zcreate() {
    if ! fs_exist "$1"; then
        eprint "Invalid parameter: '$1' is not a filesystem!"
        return 1
    fi
    if ! [[ $2 =~ ^[0-9]+$ ]] || ! [ $2 -gt 0 ]; then
        eprint 'Invalid parameters: Rotation count must be a positive number!'
        return 1
    fi
    local cur_time="$(date +%Y-%m-%d-%H:%M:%S)"
    echo "Snap ${1}@${cur_time}"
    zfs snapshot "${1}@${cur_time}"
    if [ $? -ne 0 ]; then
        eprint 'Failed to create snapshot'
        return $?
    fi

    local ZREVERSE=1
    local rotate_list="$(zquery "$1" | tail +$(($2 + 1)))"
    debug "rotate_list = $rotate_list"
    if [ -n "$rotate_list" ]; then
        local IFS=$'\n'
        for snap in $rotate_list; do
            local id=$(echo "$snap" | cut -d ' ' -f 1)
            local dataset=$(echo "$snap" | cut -d ' ' -f 2)
            local time=$(echo "$snap" | cut -d ' ' -f 3)
            zremove "${dataset}@${time}"
            local zret=$?
            if [ $zret -ne 0 ]; then
                return $zret
            fi
        done
    fi

    return 0
}

zbackup_create() {
    debug 'zbackup_create() Parameter: ' "$@"
    debug 'zbackup_create() Parameter Count: ' "$#"
    if [ $# -eq 2 ]; then
        zcreate $1 $2
        return $?
    elif [ $# -eq 1 ]; then
        zcreate $1 20
        return $?
    else
        eprint 'Usage: zbackup DATASET [ROTATION_CNT]'
        return 1
    fi
}

zbackup_list() {
    debug 'zbackup_list() Parameter: ' "$@"
    debug 'zbackup_list() Parameter Count: ' "$#"

    sel_data="$(zselect $@)"
    sel_ret=$?
    if [ $sel_ret -eq 0 ]; then
        debug "sel_ret = $sel_ret"
        table "ID DATASET TIME" "$sel_data"
    elif [ $sel_ret -eq 2 ]; then
        eprint 'Usage: zbackup --list [DATASET] [ID]'
        return 1
    fi

    return $sel_ret
}

zbackup_delete() {
    debug 'zbackup_delete() Parameter: ' "$@"
    debug 'zbackup_delete() Parameter Count: ' "$#"

    sel_data="$(zselect $@)"
    sel_ret=$?
    if [ $sel_ret -eq 0 ]; then
        debug "destory_list = $sel_data"
        if [ -n "$sel_data" ]; then
            local IFS=$'\n'
            for snap in $sel_data; do
                local id=$(echo "$snap" | cut -d ' ' -f 1)
                local dataset=$(echo "$snap" | cut -d ' ' -f 2)
                local time=$(echo "$snap" | cut -d ' ' -f 3)
                zremove "${dataset}@${time}"
                local zret=$?
                if [ $zret -ne 0 ]; then
                    return $zret
                fi
            done
        fi
    elif [ $sel_ret -eq 2 ]; then
        eprint 'Usage: zbackup --delete [DATASET] [ID]'
        return 1
    else
        return 1
    fi
}

zexport() {
    sel_data="$(zselect $@)"
    sel_ret=$?
    if [ $sel_ret -eq 0 ]; then
        if [ -n "$sel_data" ]; then
            local id=$(echo "$sel_data" | cut -d ' ' -f 1)
            local dataset=$(echo "$sel_data" | cut -d ' ' -f 2)
            local time=$(echo "$sel_data" | cut -d ' ' -f 3)
            
            local ss="${dataset}@${time}"
            local filename="$ss.gz.enc"
            echo "Export $ss => $(readlink -f "$filename")"
            set -o pipefail
            zfs send "$ss" | gzip | openssl enc -aes-256-cbc -pbkdf2 -salt > "$filename"
            local zret=$?
            set +o pipefail

            if [ $zret -ne 0 ]; then
                eprint 'Failed to export snapshot'
                return $zret
            fi
        else
            eprint 'Snapshot not found'
            return 1
        fi
    else
        return 1
    fi

    return 0
}

zbackup_export() {
    debug 'zbackup_export() Parameter: ' "$@"
    debug 'zbackup_export() Parameter Count: ' "$#"
    if [ $# -eq 2 ]; then
        zexport $1 $2
        return $?
    elif [ $# -eq 1 ]; then
        zexport $1 1
        return $?
    else
        eprint 'Usage: zbackup --export DATASET [ID]'
        return 1
    fi
}

zbackup_import() {
    debug 'zbackup_import() Parameter: ' "$@"
    debug 'zbackup_import() Parameter Count: ' "$#"
    if [ $# -eq 2 ]; then
        if ! [ -f "$1" ]; then
            eprint "File '$1' not found!"
        fi
        if ! fs_exist "$2"; then
            eprint "Dataset '$2' not found!"
        fi
        echo "Import $1 => $2"
    else
        eprint 'Usage: zbackup --import FILE DATASET'
        return 1
    fi
}

debug 'Parameter: ' "$@"
debug 'Parameter Count: ' "$#"
if [ $# -lt 1 -o -z "$1" ]; then
    eprint 'You must provide parameters!'
    exit 1
fi

case "$1" in
    '-l'|'--list')
        shift
        zbackup_list $@
        ;;
    '-d'|'--delete')
        shift
        zbackup_delete $@
        ;;
    '-e'|'--export')
        shift
        zbackup_export $@
        ;;
    '-i'|'--import')
        shift
        zbackup_import $@
        ;;
    *)
        zbackup_create $@
        ;;
esac
exit $?

